
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.0
 * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Breeding
 */

export type Breeding = {
  id: number
  name: string
  webPage: string
}

/**
 * Model Dog
 */

export type Dog = {
  id: number
  pkr: string
  birth: Date
  sex: boolean
  litter: string
  name: string
  pedigreeName: string
  momId: number | null
  dadId: number | null
  titles: string[]
  phisical: string | null
  breedingId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Breedings
 * const breedings = await prisma.breeding.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Breedings
   * const breedings = await prisma.breeding.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.breeding`: Exposes CRUD operations for the **Breeding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Breedings
    * const breedings = await prisma.breeding.findMany()
    * ```
    */
  get breeding(): Prisma.BreedingDelegate;

  /**
   * `prisma.dog`: Exposes CRUD operations for the **Dog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dogs
    * const dogs = await prisma.dog.findMany()
    * ```
    */
  get dog(): Prisma.DogDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.0
   * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Breeding: 'Breeding',
    Dog: 'Dog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Breeding
   */


  export type AggregateBreeding = {
    count: number | null
    avg: BreedingAvgAggregateOutputType | null
    sum: BreedingSumAggregateOutputType | null
    min: BreedingMinAggregateOutputType | null
    max: BreedingMaxAggregateOutputType | null
  }

  export type BreedingAvgAggregateOutputType = {
    id: number
  }

  export type BreedingSumAggregateOutputType = {
    id: number
  }

  export type BreedingMinAggregateOutputType = {
    id: number
    name: string | null
    webPage: string | null
  }

  export type BreedingMaxAggregateOutputType = {
    id: number
    name: string | null
    webPage: string | null
  }

  export type BreedingCountAggregateOutputType = {
    id: number
    name: number | null
    webPage: number | null
    _all: number
  }


  export type BreedingAvgAggregateInputType = {
    id?: true
  }

  export type BreedingSumAggregateInputType = {
    id?: true
  }

  export type BreedingMinAggregateInputType = {
    id?: true
    name?: true
    webPage?: true
  }

  export type BreedingMaxAggregateInputType = {
    id?: true
    name?: true
    webPage?: true
  }

  export type BreedingCountAggregateInputType = {
    id?: true
    name?: true
    webPage?: true
    _all?: true
  }

  export type AggregateBreedingArgs = {
    where?: BreedingWhereInput
    orderBy?: Enumerable<BreedingOrderByInput>
    cursor?: BreedingWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: BreedingAvgAggregateInputType
    sum?: BreedingSumAggregateInputType
    min?: BreedingMinAggregateInputType
    max?: BreedingMaxAggregateInputType
  }

  export type GetBreedingAggregateType<T extends AggregateBreedingArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetBreedingAggregateScalarType<T[P]>
  }

  export type GetBreedingAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof BreedingAvgAggregateOutputType ? BreedingAvgAggregateOutputType[P] : never
  }

    



  export type BreedingSelect = {
    id?: boolean
    name?: boolean
    webPage?: boolean
    dogs?: boolean | FindManyDogArgs
  }

  export type BreedingInclude = {
    dogs?: boolean | FindManyDogArgs
  }

  export type BreedingGetPayload<
    S extends boolean | null | undefined | BreedingArgs,
    U = keyof S
      > = S extends true
        ? Breeding
    : S extends undefined
    ? never
    : S extends BreedingArgs | FindManyBreedingArgs
    ?'include' extends U
    ? Breeding  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'dogs'
        ? Array < DogGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Breeding ?Breeding [P]
  : 
          P extends 'dogs'
        ? Array < DogGetPayload<S['select'][P]>>  : never
  } 
    : Breeding
  : Breeding


  export interface BreedingDelegate {
    /**
     * Find zero or one Breeding that matches the filter.
     * @param {FindUniqueBreedingArgs} args - Arguments to find a Breeding
     * @example
     * // Get one Breeding
     * const breeding = await prisma.breeding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueBreedingArgs>(
      args: Subset<T, FindUniqueBreedingArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding | null>, Prisma__BreedingClient<BreedingGetPayload<T> | null>>
    /**
     * Find the first Breeding that matches the filter.
     * @param {FindFirstBreedingArgs} args - Arguments to find a Breeding
     * @example
     * // Get one Breeding
     * const breeding = await prisma.breeding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstBreedingArgs>(
      args?: Subset<T, FindFirstBreedingArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding | null>, Prisma__BreedingClient<BreedingGetPayload<T> | null>>
    /**
     * Find zero or more Breedings that matches the filter.
     * @param {FindManyBreedingArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Breedings
     * const breedings = await prisma.breeding.findMany()
     * 
     * // Get first 10 Breedings
     * const breedings = await prisma.breeding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const breedingWithIdOnly = await prisma.breeding.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyBreedingArgs>(
      args?: Subset<T, FindManyBreedingArgs>
    ): CheckSelect<T, Promise<Array<Breeding>>, Promise<Array<BreedingGetPayload<T>>>>
    /**
     * Create a Breeding.
     * @param {BreedingCreateArgs} args - Arguments to create a Breeding.
     * @example
     * // Create one Breeding
     * const Breeding = await prisma.breeding.create({
     *   data: {
     *     // ... data to create a Breeding
     *   }
     * })
     * 
    **/
    create<T extends BreedingCreateArgs>(
      args: Subset<T, BreedingCreateArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding>, Prisma__BreedingClient<BreedingGetPayload<T>>>
    /**
     * Delete a Breeding.
     * @param {BreedingDeleteArgs} args - Arguments to delete one Breeding.
     * @example
     * // Delete one Breeding
     * const Breeding = await prisma.breeding.delete({
     *   where: {
     *     // ... filter to delete one Breeding
     *   }
     * })
     * 
    **/
    delete<T extends BreedingDeleteArgs>(
      args: Subset<T, BreedingDeleteArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding>, Prisma__BreedingClient<BreedingGetPayload<T>>>
    /**
     * Update one Breeding.
     * @param {BreedingUpdateArgs} args - Arguments to update one Breeding.
     * @example
     * // Update one Breeding
     * const breeding = await prisma.breeding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BreedingUpdateArgs>(
      args: Subset<T, BreedingUpdateArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding>, Prisma__BreedingClient<BreedingGetPayload<T>>>
    /**
     * Delete zero or more Breedings.
     * @param {BreedingDeleteManyArgs} args - Arguments to filter Breedings to delete.
     * @example
     * // Delete a few Breedings
     * const { count } = await prisma.breeding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BreedingDeleteManyArgs>(
      args?: Subset<T, BreedingDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Breedings.
     * @param {BreedingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Breedings
     * const breeding = await prisma.breeding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BreedingUpdateManyArgs>(
      args: Subset<T, BreedingUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Breeding.
     * @param {BreedingUpsertArgs} args - Arguments to update or create a Breeding.
     * @example
     * // Update or create a Breeding
     * const breeding = await prisma.breeding.upsert({
     *   create: {
     *     // ... data to create a Breeding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Breeding we want to update
     *   }
     * })
    **/
    upsert<T extends BreedingUpsertArgs>(
      args: Subset<T, BreedingUpsertArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding>, Prisma__BreedingClient<BreedingGetPayload<T>>>
    /**
     * Find zero or one Breeding that matches the filter.
     * @param {FindUniqueBreedingArgs} args - Arguments to find a Breeding
     * @deprecated This will be deprecated please use prisma.breeding.findUnique
     * @example
     * // Get one Breeding
     * const breeding = await prisma.breeding.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueBreedingArgs>(
      args: Subset<T, FindUniqueBreedingArgs>
    ): CheckSelect<T, Prisma__BreedingClient<Breeding | null>, Prisma__BreedingClient<BreedingGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyBreedingArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateBreedingArgs>(args: Subset<T, AggregateBreedingArgs>): Promise<GetBreedingAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Breeding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BreedingClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dogs<T extends FindManyDogArgs = {}>(args?: Subset<T, FindManyDogArgs>): CheckSelect<T, Promise<Array<Dog>>, Promise<Array<DogGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Breeding findUnique
   */
  export type FindUniqueBreedingArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * Filter, which Breeding to fetch.
    **/
    where: BreedingWhereUniqueInput
  }


  /**
   * Breeding findFirst
   */
  export type FindFirstBreedingArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * Filter, which Breeding to fetch.
    **/
    where?: BreedingWhereInput
    orderBy?: Enumerable<BreedingOrderByInput>
    cursor?: BreedingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BreedingScalarFieldEnum>
  }


  /**
   * Breeding findMany
   */
  export type FindManyBreedingArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * Filter, which Breedings to fetch.
    **/
    where?: BreedingWhereInput
    /**
     * Determine the order of the Breedings to fetch.
    **/
    orderBy?: Enumerable<BreedingOrderByInput>
    /**
     * Sets the position for listing Breedings.
    **/
    cursor?: BreedingWhereUniqueInput
    /**
     * The number of Breedings to fetch. If negative number, it will take Breedings before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Breedings.
    **/
    skip?: number
    distinct?: Enumerable<BreedingScalarFieldEnum>
  }


  /**
   * Breeding create
   */
  export type BreedingCreateArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * The data needed to create a Breeding.
    **/
    data: BreedingCreateInput
  }


  /**
   * Breeding update
   */
  export type BreedingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * The data needed to update a Breeding.
    **/
    data: BreedingUpdateInput
    /**
     * Choose, which Breeding to update.
    **/
    where: BreedingWhereUniqueInput
  }


  /**
   * Breeding updateMany
   */
  export type BreedingUpdateManyArgs = {
    data: BreedingUpdateManyMutationInput
    where?: BreedingWhereInput
  }


  /**
   * Breeding upsert
   */
  export type BreedingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * The filter to search for the Breeding to update in case it exists.
    **/
    where: BreedingWhereUniqueInput
    /**
     * In case the Breeding found by the `where` argument doesn't exist, create a new Breeding with this data.
    **/
    create: BreedingCreateInput
    /**
     * In case the Breeding was found with the provided `where` argument, update it with this data.
    **/
    update: BreedingUpdateInput
  }


  /**
   * Breeding delete
   */
  export type BreedingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
    /**
     * Filter which Breeding to delete.
    **/
    where: BreedingWhereUniqueInput
  }


  /**
   * Breeding deleteMany
   */
  export type BreedingDeleteManyArgs = {
    where?: BreedingWhereInput
  }


  /**
   * Breeding without action
   */
  export type BreedingArgs = {
    /**
     * Select specific fields to fetch from the Breeding
    **/
    select?: BreedingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: BreedingInclude | null
  }



  /**
   * Model Dog
   */


  export type AggregateDog = {
    count: number | null
    avg: DogAvgAggregateOutputType | null
    sum: DogSumAggregateOutputType | null
    min: DogMinAggregateOutputType | null
    max: DogMaxAggregateOutputType | null
  }

  export type DogAvgAggregateOutputType = {
    id: number
    momId: number | null
    dadId: number | null
    breedingId: number
  }

  export type DogSumAggregateOutputType = {
    id: number
    momId: number | null
    dadId: number | null
    breedingId: number
  }

  export type DogMinAggregateOutputType = {
    id: number
    pkr: string | null
    birth: Date | null
    sex: boolean | null
    litter: string | null
    name: string | null
    pedigreeName: string | null
    momId: number | null
    dadId: number | null
    phisical: string | null
    breedingId: number
  }

  export type DogMaxAggregateOutputType = {
    id: number
    pkr: string | null
    birth: Date | null
    sex: boolean | null
    litter: string | null
    name: string | null
    pedigreeName: string | null
    momId: number | null
    dadId: number | null
    phisical: string | null
    breedingId: number
  }

  export type DogCountAggregateOutputType = {
    id: number
    pkr: number | null
    birth: number | null
    sex: number | null
    litter: number | null
    name: number | null
    pedigreeName: number | null
    momId: number | null
    dadId: number | null
    titles: number | null
    phisical: number | null
    breedingId: number
    _all: number
  }


  export type DogAvgAggregateInputType = {
    id?: true
    momId?: true
    dadId?: true
    breedingId?: true
  }

  export type DogSumAggregateInputType = {
    id?: true
    momId?: true
    dadId?: true
    breedingId?: true
  }

  export type DogMinAggregateInputType = {
    id?: true
    pkr?: true
    birth?: true
    sex?: true
    litter?: true
    name?: true
    pedigreeName?: true
    momId?: true
    dadId?: true
    phisical?: true
    breedingId?: true
  }

  export type DogMaxAggregateInputType = {
    id?: true
    pkr?: true
    birth?: true
    sex?: true
    litter?: true
    name?: true
    pedigreeName?: true
    momId?: true
    dadId?: true
    phisical?: true
    breedingId?: true
  }

  export type DogCountAggregateInputType = {
    id?: true
    pkr?: true
    birth?: true
    sex?: true
    litter?: true
    name?: true
    pedigreeName?: true
    momId?: true
    dadId?: true
    titles?: true
    phisical?: true
    breedingId?: true
    _all?: true
  }

  export type AggregateDogArgs = {
    where?: DogWhereInput
    orderBy?: Enumerable<DogOrderByInput>
    cursor?: DogWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: DogAvgAggregateInputType
    sum?: DogSumAggregateInputType
    min?: DogMinAggregateInputType
    max?: DogMaxAggregateInputType
  }

  export type GetDogAggregateType<T extends AggregateDogArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetDogAggregateScalarType<T[P]>
  }

  export type GetDogAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof DogAvgAggregateOutputType ? DogAvgAggregateOutputType[P] : never
  }

    



  export type DogSelect = {
    id?: boolean
    pkr?: boolean
    birth?: boolean
    sex?: boolean
    litter?: boolean
    name?: boolean
    pedigreeName?: boolean
    momId?: boolean
    dadId?: boolean
    mom?: boolean | DogArgs
    dad?: boolean | DogArgs
    momChildren?: boolean | FindManyDogArgs
    dadChildren?: boolean | FindManyDogArgs
    titles?: boolean
    phisical?: boolean
    breedingId?: boolean
    breeding?: boolean | BreedingArgs
  }

  export type DogInclude = {
    mom?: boolean | DogArgs
    dad?: boolean | DogArgs
    momChildren?: boolean | FindManyDogArgs
    dadChildren?: boolean | FindManyDogArgs
    breeding?: boolean | BreedingArgs
  }

  export type DogGetPayload<
    S extends boolean | null | undefined | DogArgs,
    U = keyof S
      > = S extends true
        ? Dog
    : S extends undefined
    ? never
    : S extends DogArgs | FindManyDogArgs
    ?'include' extends U
    ? Dog  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'mom'
        ? DogGetPayload<S['include'][P]> | null :
        P extends 'dad'
        ? DogGetPayload<S['include'][P]> | null :
        P extends 'momChildren'
        ? Array < DogGetPayload<S['include'][P]>>  :
        P extends 'dadChildren'
        ? Array < DogGetPayload<S['include'][P]>>  :
        P extends 'breeding'
        ? BreedingGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Dog ?Dog [P]
  : 
          P extends 'mom'
        ? DogGetPayload<S['select'][P]> | null :
        P extends 'dad'
        ? DogGetPayload<S['select'][P]> | null :
        P extends 'momChildren'
        ? Array < DogGetPayload<S['select'][P]>>  :
        P extends 'dadChildren'
        ? Array < DogGetPayload<S['select'][P]>>  :
        P extends 'breeding'
        ? BreedingGetPayload<S['select'][P]> : never
  } 
    : Dog
  : Dog


  export interface DogDelegate {
    /**
     * Find zero or one Dog that matches the filter.
     * @param {FindUniqueDogArgs} args - Arguments to find a Dog
     * @example
     * // Get one Dog
     * const dog = await prisma.dog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueDogArgs>(
      args: Subset<T, FindUniqueDogArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog | null>, Prisma__DogClient<DogGetPayload<T> | null>>
    /**
     * Find the first Dog that matches the filter.
     * @param {FindFirstDogArgs} args - Arguments to find a Dog
     * @example
     * // Get one Dog
     * const dog = await prisma.dog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstDogArgs>(
      args?: Subset<T, FindFirstDogArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog | null>, Prisma__DogClient<DogGetPayload<T> | null>>
    /**
     * Find zero or more Dogs that matches the filter.
     * @param {FindManyDogArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dogs
     * const dogs = await prisma.dog.findMany()
     * 
     * // Get first 10 Dogs
     * const dogs = await prisma.dog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dogWithIdOnly = await prisma.dog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyDogArgs>(
      args?: Subset<T, FindManyDogArgs>
    ): CheckSelect<T, Promise<Array<Dog>>, Promise<Array<DogGetPayload<T>>>>
    /**
     * Create a Dog.
     * @param {DogCreateArgs} args - Arguments to create a Dog.
     * @example
     * // Create one Dog
     * const Dog = await prisma.dog.create({
     *   data: {
     *     // ... data to create a Dog
     *   }
     * })
     * 
    **/
    create<T extends DogCreateArgs>(
      args: Subset<T, DogCreateArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog>, Prisma__DogClient<DogGetPayload<T>>>
    /**
     * Delete a Dog.
     * @param {DogDeleteArgs} args - Arguments to delete one Dog.
     * @example
     * // Delete one Dog
     * const Dog = await prisma.dog.delete({
     *   where: {
     *     // ... filter to delete one Dog
     *   }
     * })
     * 
    **/
    delete<T extends DogDeleteArgs>(
      args: Subset<T, DogDeleteArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog>, Prisma__DogClient<DogGetPayload<T>>>
    /**
     * Update one Dog.
     * @param {DogUpdateArgs} args - Arguments to update one Dog.
     * @example
     * // Update one Dog
     * const dog = await prisma.dog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DogUpdateArgs>(
      args: Subset<T, DogUpdateArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog>, Prisma__DogClient<DogGetPayload<T>>>
    /**
     * Delete zero or more Dogs.
     * @param {DogDeleteManyArgs} args - Arguments to filter Dogs to delete.
     * @example
     * // Delete a few Dogs
     * const { count } = await prisma.dog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DogDeleteManyArgs>(
      args?: Subset<T, DogDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Dogs.
     * @param {DogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dogs
     * const dog = await prisma.dog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DogUpdateManyArgs>(
      args: Subset<T, DogUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Dog.
     * @param {DogUpsertArgs} args - Arguments to update or create a Dog.
     * @example
     * // Update or create a Dog
     * const dog = await prisma.dog.upsert({
     *   create: {
     *     // ... data to create a Dog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dog we want to update
     *   }
     * })
    **/
    upsert<T extends DogUpsertArgs>(
      args: Subset<T, DogUpsertArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog>, Prisma__DogClient<DogGetPayload<T>>>
    /**
     * Find zero or one Dog that matches the filter.
     * @param {FindUniqueDogArgs} args - Arguments to find a Dog
     * @deprecated This will be deprecated please use prisma.dog.findUnique
     * @example
     * // Get one Dog
     * const dog = await prisma.dog.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueDogArgs>(
      args: Subset<T, FindUniqueDogArgs>
    ): CheckSelect<T, Prisma__DogClient<Dog | null>, Prisma__DogClient<DogGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyDogArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateDogArgs>(args: Subset<T, AggregateDogArgs>): Promise<GetDogAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DogClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mom<T extends DogArgs = {}>(args?: Subset<T, DogArgs>): CheckSelect<T, Prisma__DogClient<Dog | null>, Prisma__DogClient<DogGetPayload<T> | null>>;

    dad<T extends DogArgs = {}>(args?: Subset<T, DogArgs>): CheckSelect<T, Prisma__DogClient<Dog | null>, Prisma__DogClient<DogGetPayload<T> | null>>;

    momChildren<T extends FindManyDogArgs = {}>(args?: Subset<T, FindManyDogArgs>): CheckSelect<T, Promise<Array<Dog>>, Promise<Array<DogGetPayload<T>>>>;

    dadChildren<T extends FindManyDogArgs = {}>(args?: Subset<T, FindManyDogArgs>): CheckSelect<T, Promise<Array<Dog>>, Promise<Array<DogGetPayload<T>>>>;

    breeding<T extends BreedingArgs = {}>(args?: Subset<T, BreedingArgs>): CheckSelect<T, Prisma__BreedingClient<Breeding | null>, Prisma__BreedingClient<BreedingGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Dog findUnique
   */
  export type FindUniqueDogArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * Filter, which Dog to fetch.
    **/
    where: DogWhereUniqueInput
  }


  /**
   * Dog findFirst
   */
  export type FindFirstDogArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * Filter, which Dog to fetch.
    **/
    where?: DogWhereInput
    orderBy?: Enumerable<DogOrderByInput>
    cursor?: DogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DogScalarFieldEnum>
  }


  /**
   * Dog findMany
   */
  export type FindManyDogArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * Filter, which Dogs to fetch.
    **/
    where?: DogWhereInput
    /**
     * Determine the order of the Dogs to fetch.
    **/
    orderBy?: Enumerable<DogOrderByInput>
    /**
     * Sets the position for listing Dogs.
    **/
    cursor?: DogWhereUniqueInput
    /**
     * The number of Dogs to fetch. If negative number, it will take Dogs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Dogs.
    **/
    skip?: number
    distinct?: Enumerable<DogScalarFieldEnum>
  }


  /**
   * Dog create
   */
  export type DogCreateArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * The data needed to create a Dog.
    **/
    data: DogCreateInput
  }


  /**
   * Dog update
   */
  export type DogUpdateArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * The data needed to update a Dog.
    **/
    data: DogUpdateInput
    /**
     * Choose, which Dog to update.
    **/
    where: DogWhereUniqueInput
  }


  /**
   * Dog updateMany
   */
  export type DogUpdateManyArgs = {
    data: DogUpdateManyMutationInput
    where?: DogWhereInput
  }


  /**
   * Dog upsert
   */
  export type DogUpsertArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * The filter to search for the Dog to update in case it exists.
    **/
    where: DogWhereUniqueInput
    /**
     * In case the Dog found by the `where` argument doesn't exist, create a new Dog with this data.
    **/
    create: DogCreateInput
    /**
     * In case the Dog was found with the provided `where` argument, update it with this data.
    **/
    update: DogUpdateInput
  }


  /**
   * Dog delete
   */
  export type DogDeleteArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
    /**
     * Filter which Dog to delete.
    **/
    where: DogWhereUniqueInput
  }


  /**
   * Dog deleteMany
   */
  export type DogDeleteManyArgs = {
    where?: DogWhereInput
  }


  /**
   * Dog without action
   */
  export type DogArgs = {
    /**
     * Select specific fields to fetch from the Dog
    **/
    select?: DogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DogInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BreedingScalarFieldEnum: {
    id: 'id',
    name: 'name',
    webPage: 'webPage'
  };

  export type BreedingScalarFieldEnum = (typeof BreedingScalarFieldEnum)[keyof typeof BreedingScalarFieldEnum]


  export const DogScalarFieldEnum: {
    id: 'id',
    pkr: 'pkr',
    birth: 'birth',
    sex: 'sex',
    litter: 'litter',
    name: 'name',
    pedigreeName: 'pedigreeName',
    momId: 'momId',
    dadId: 'dadId',
    titles: 'titles',
    phisical: 'phisical',
    breedingId: 'breedingId'
  };

  export type DogScalarFieldEnum = (typeof DogScalarFieldEnum)[keyof typeof DogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type BreedingWhereInput = {
    AND?: Enumerable<BreedingWhereInput>
    OR?: Enumerable<BreedingWhereInput>
    NOT?: Enumerable<BreedingWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    webPage?: StringFilter | string
    dogs?: DogListRelationFilter
  }

  export type BreedingOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    webPage?: SortOrder
  }

  export type BreedingWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type DogWhereInput = {
    AND?: Enumerable<DogWhereInput>
    OR?: Enumerable<DogWhereInput>
    NOT?: Enumerable<DogWhereInput>
    id?: IntFilter | number
    pkr?: StringFilter | string
    birth?: DateTimeFilter | Date | string
    sex?: BoolFilter | boolean
    litter?: StringFilter | string
    name?: StringFilter | string
    pedigreeName?: StringFilter | string
    momId?: IntNullableFilter | number | null
    dadId?: IntNullableFilter | number | null
    mom?: XOR<DogWhereInput, DogRelationFilter> | null
    dad?: XOR<DogWhereInput, DogRelationFilter> | null
    momChildren?: DogListRelationFilter
    dadChildren?: DogListRelationFilter
    titles?: StringNullableListFilter
    phisical?: StringNullableFilter | string | null
    breedingId?: IntFilter | number
    breeding?: XOR<BreedingWhereInput, BreedingRelationFilter>
  }

  export type DogOrderByInput = {
    id?: SortOrder
    pkr?: SortOrder
    birth?: SortOrder
    sex?: SortOrder
    litter?: SortOrder
    name?: SortOrder
    pedigreeName?: SortOrder
    momId?: SortOrder
    dadId?: SortOrder
    titles?: SortOrder
    phisical?: SortOrder
    breedingId?: SortOrder
  }

  export type DogWhereUniqueInput = {
    id?: number
    pkr?: string
  }

  export type BreedingCreateInput = {
    name: string
    webPage: string
    dogs?: DogCreateManyWithoutBreedingInput
  }

  export type BreedingUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    webPage?: StringFieldUpdateOperationsInput | string
    dogs?: DogUpdateManyWithoutBreedingInput
  }

  export type BreedingUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    webPage?: StringFieldUpdateOperationsInput | string
  }

  export type DogCreateInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    mom?: DogCreateOneWithoutMomChildrenInput
    dad?: DogCreateOneWithoutDadChildrenInput
    momChildren?: DogCreateManyWithoutMomInput
    dadChildren?: DogCreateManyWithoutDadInput
    breeding: BreedingCreateOneWithoutDogsInput
  }

  export type DogUpdateInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    mom?: DogUpdateOneWithoutMomChildrenInput
    dad?: DogUpdateOneWithoutDadChildrenInput
    momChildren?: DogUpdateManyWithoutMomInput
    dadChildren?: DogUpdateManyWithoutDadInput
    breeding?: BreedingUpdateOneRequiredWithoutDogsInput
  }

  export type DogUpdateManyMutationInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DogListRelationFilter = {
    every?: DogWhereInput
    some?: DogWhereInput
    none?: DogWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DogRelationFilter = {
    is?: DogWhereInput | null
    isNot?: DogWhereInput | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BreedingRelationFilter = {
    is?: BreedingWhereInput
    isNot?: BreedingWhereInput
  }

  export type DogCreateManyWithoutBreedingInput = {
    create?: Enumerable<DogCreateWithoutBreedingInput>
    connect?: Enumerable<DogWhereUniqueInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutbreedingInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DogUpdateManyWithoutBreedingInput = {
    create?: Enumerable<DogCreateWithoutBreedingInput>
    connect?: Enumerable<DogWhereUniqueInput>
    set?: Enumerable<DogWhereUniqueInput>
    disconnect?: Enumerable<DogWhereUniqueInput>
    delete?: Enumerable<DogWhereUniqueInput>
    update?: Enumerable<DogUpdateWithWhereUniqueWithoutBreedingInput>
    updateMany?: Enumerable<DogUpdateManyWithWhereWithoutBreedingInput>
    deleteMany?: Enumerable<DogScalarWhereInput>
    upsert?: Enumerable<DogUpsertWithWhereUniqueWithoutBreedingInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutbreedingInput>
  }

  export type DogCreatetitlesInput = {
    set: Enumerable<string>
  }

  export type DogCreateOneWithoutMomChildrenInput = {
    create?: DogCreateWithoutMomChildrenInput
    connect?: DogWhereUniqueInput
    connectOrCreate?: DogCreateOrConnectWithoutmomChildrenInput
  }

  export type DogCreateOneWithoutDadChildrenInput = {
    create?: DogCreateWithoutDadChildrenInput
    connect?: DogWhereUniqueInput
    connectOrCreate?: DogCreateOrConnectWithoutdadChildrenInput
  }

  export type DogCreateManyWithoutMomInput = {
    create?: Enumerable<DogCreateWithoutMomInput>
    connect?: Enumerable<DogWhereUniqueInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutmomInput>
  }

  export type DogCreateManyWithoutDadInput = {
    create?: Enumerable<DogCreateWithoutDadInput>
    connect?: Enumerable<DogWhereUniqueInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutdadInput>
  }

  export type BreedingCreateOneWithoutDogsInput = {
    create?: BreedingCreateWithoutDogsInput
    connect?: BreedingWhereUniqueInput
    connectOrCreate?: BreedingCreateOrConnectWithoutdogsInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DogUpdatetitlesInput = {
    set: Enumerable<string>
  }

  export type DogUpdateOneWithoutMomChildrenInput = {
    create?: DogCreateWithoutMomChildrenInput
    connect?: DogWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: DogUpdateWithoutMomChildrenInput
    upsert?: DogUpsertWithoutMomChildrenInput
    connectOrCreate?: DogCreateOrConnectWithoutmomChildrenInput
  }

  export type DogUpdateOneWithoutDadChildrenInput = {
    create?: DogCreateWithoutDadChildrenInput
    connect?: DogWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: DogUpdateWithoutDadChildrenInput
    upsert?: DogUpsertWithoutDadChildrenInput
    connectOrCreate?: DogCreateOrConnectWithoutdadChildrenInput
  }

  export type DogUpdateManyWithoutMomInput = {
    create?: Enumerable<DogCreateWithoutMomInput>
    connect?: Enumerable<DogWhereUniqueInput>
    set?: Enumerable<DogWhereUniqueInput>
    disconnect?: Enumerable<DogWhereUniqueInput>
    delete?: Enumerable<DogWhereUniqueInput>
    update?: Enumerable<DogUpdateWithWhereUniqueWithoutMomInput>
    updateMany?: Enumerable<DogUpdateManyWithWhereWithoutMomInput>
    deleteMany?: Enumerable<DogScalarWhereInput>
    upsert?: Enumerable<DogUpsertWithWhereUniqueWithoutMomInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutmomInput>
  }

  export type DogUpdateManyWithoutDadInput = {
    create?: Enumerable<DogCreateWithoutDadInput>
    connect?: Enumerable<DogWhereUniqueInput>
    set?: Enumerable<DogWhereUniqueInput>
    disconnect?: Enumerable<DogWhereUniqueInput>
    delete?: Enumerable<DogWhereUniqueInput>
    update?: Enumerable<DogUpdateWithWhereUniqueWithoutDadInput>
    updateMany?: Enumerable<DogUpdateManyWithWhereWithoutDadInput>
    deleteMany?: Enumerable<DogScalarWhereInput>
    upsert?: Enumerable<DogUpsertWithWhereUniqueWithoutDadInput>
    connectOrCreate?: Enumerable<DogCreateOrConnectWithoutdadInput>
  }

  export type BreedingUpdateOneRequiredWithoutDogsInput = {
    create?: BreedingCreateWithoutDogsInput
    connect?: BreedingWhereUniqueInput
    update?: BreedingUpdateWithoutDogsInput
    upsert?: BreedingUpsertWithoutDogsInput
    connectOrCreate?: BreedingCreateOrConnectWithoutdogsInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DogCreateWithoutBreedingInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    mom?: DogCreateOneWithoutMomChildrenInput
    dad?: DogCreateOneWithoutDadChildrenInput
    momChildren?: DogCreateManyWithoutMomInput
    dadChildren?: DogCreateManyWithoutDadInput
  }

  export type DogCreateOrConnectWithoutbreedingInput = {
    where: DogWhereUniqueInput
    create: DogCreateWithoutBreedingInput
  }

  export type DogUpdateWithWhereUniqueWithoutBreedingInput = {
    where: DogWhereUniqueInput
    data: DogUpdateWithoutBreedingInput
  }

  export type DogUpdateManyWithWhereWithoutBreedingInput = {
    where: DogScalarWhereInput
    data: DogUpdateManyMutationInput
  }

  export type DogScalarWhereInput = {
    AND?: Enumerable<DogScalarWhereInput>
    OR?: Enumerable<DogScalarWhereInput>
    NOT?: Enumerable<DogScalarWhereInput>
    id?: IntFilter | number
    pkr?: StringFilter | string
    birth?: DateTimeFilter | Date | string
    sex?: BoolFilter | boolean
    litter?: StringFilter | string
    name?: StringFilter | string
    pedigreeName?: StringFilter | string
    momId?: IntNullableFilter | number | null
    dadId?: IntNullableFilter | number | null
    titles?: StringNullableListFilter
    phisical?: StringNullableFilter | string | null
    breedingId?: IntFilter | number
  }

  export type DogUpsertWithWhereUniqueWithoutBreedingInput = {
    where: DogWhereUniqueInput
    update: DogUpdateWithoutBreedingInput
    create: DogCreateWithoutBreedingInput
  }

  export type DogCreateWithoutMomChildrenInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    mom?: DogCreateOneWithoutMomChildrenInput
    dad?: DogCreateOneWithoutDadChildrenInput
    dadChildren?: DogCreateManyWithoutDadInput
    breeding: BreedingCreateOneWithoutDogsInput
  }

  export type DogCreateOrConnectWithoutmomChildrenInput = {
    where: DogWhereUniqueInput
    create: DogCreateWithoutMomChildrenInput
  }

  export type DogCreateWithoutDadChildrenInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    mom?: DogCreateOneWithoutMomChildrenInput
    dad?: DogCreateOneWithoutDadChildrenInput
    momChildren?: DogCreateManyWithoutMomInput
    breeding: BreedingCreateOneWithoutDogsInput
  }

  export type DogCreateOrConnectWithoutdadChildrenInput = {
    where: DogWhereUniqueInput
    create: DogCreateWithoutDadChildrenInput
  }

  export type DogCreateWithoutMomInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    dad?: DogCreateOneWithoutDadChildrenInput
    momChildren?: DogCreateManyWithoutMomInput
    dadChildren?: DogCreateManyWithoutDadInput
    breeding: BreedingCreateOneWithoutDogsInput
  }

  export type DogCreateOrConnectWithoutmomInput = {
    where: DogWhereUniqueInput
    create: DogCreateWithoutMomInput
  }

  export type DogCreateWithoutDadInput = {
    pkr: string
    birth: Date | string
    sex?: boolean
    litter: string
    name: string
    pedigreeName: string
    phisical?: string | null
    titles?: DogCreatetitlesInput | Enumerable<string>
    mom?: DogCreateOneWithoutMomChildrenInput
    momChildren?: DogCreateManyWithoutMomInput
    dadChildren?: DogCreateManyWithoutDadInput
    breeding: BreedingCreateOneWithoutDogsInput
  }

  export type DogCreateOrConnectWithoutdadInput = {
    where: DogWhereUniqueInput
    create: DogCreateWithoutDadInput
  }

  export type BreedingCreateWithoutDogsInput = {
    name: string
    webPage: string
  }

  export type BreedingCreateOrConnectWithoutdogsInput = {
    where: BreedingWhereUniqueInput
    create: BreedingCreateWithoutDogsInput
  }

  export type DogUpdateWithoutMomChildrenInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    mom?: DogUpdateOneWithoutMomChildrenInput
    dad?: DogUpdateOneWithoutDadChildrenInput
    dadChildren?: DogUpdateManyWithoutDadInput
    breeding?: BreedingUpdateOneRequiredWithoutDogsInput
  }

  export type DogUpsertWithoutMomChildrenInput = {
    update: DogUpdateWithoutMomChildrenInput
    create: DogCreateWithoutMomChildrenInput
  }

  export type DogUpdateWithoutDadChildrenInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    mom?: DogUpdateOneWithoutMomChildrenInput
    dad?: DogUpdateOneWithoutDadChildrenInput
    momChildren?: DogUpdateManyWithoutMomInput
    breeding?: BreedingUpdateOneRequiredWithoutDogsInput
  }

  export type DogUpsertWithoutDadChildrenInput = {
    update: DogUpdateWithoutDadChildrenInput
    create: DogCreateWithoutDadChildrenInput
  }

  export type DogUpdateWithWhereUniqueWithoutMomInput = {
    where: DogWhereUniqueInput
    data: DogUpdateWithoutMomInput
  }

  export type DogUpdateManyWithWhereWithoutMomInput = {
    where: DogScalarWhereInput
    data: DogUpdateManyMutationInput
  }

  export type DogUpsertWithWhereUniqueWithoutMomInput = {
    where: DogWhereUniqueInput
    update: DogUpdateWithoutMomInput
    create: DogCreateWithoutMomInput
  }

  export type DogUpdateWithWhereUniqueWithoutDadInput = {
    where: DogWhereUniqueInput
    data: DogUpdateWithoutDadInput
  }

  export type DogUpdateManyWithWhereWithoutDadInput = {
    where: DogScalarWhereInput
    data: DogUpdateManyMutationInput
  }

  export type DogUpsertWithWhereUniqueWithoutDadInput = {
    where: DogWhereUniqueInput
    update: DogUpdateWithoutDadInput
    create: DogCreateWithoutDadInput
  }

  export type BreedingUpdateWithoutDogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    webPage?: StringFieldUpdateOperationsInput | string
  }

  export type BreedingUpsertWithoutDogsInput = {
    update: BreedingUpdateWithoutDogsInput
    create: BreedingCreateWithoutDogsInput
  }

  export type DogUpdateWithoutBreedingInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    mom?: DogUpdateOneWithoutMomChildrenInput
    dad?: DogUpdateOneWithoutDadChildrenInput
    momChildren?: DogUpdateManyWithoutMomInput
    dadChildren?: DogUpdateManyWithoutDadInput
  }

  export type DogUpdateWithoutMomInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    dad?: DogUpdateOneWithoutDadChildrenInput
    momChildren?: DogUpdateManyWithoutMomInput
    dadChildren?: DogUpdateManyWithoutDadInput
    breeding?: BreedingUpdateOneRequiredWithoutDogsInput
  }

  export type DogUpdateWithoutDadInput = {
    pkr?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: BoolFieldUpdateOperationsInput | boolean
    litter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pedigreeName?: StringFieldUpdateOperationsInput | string
    phisical?: NullableStringFieldUpdateOperationsInput | string | null
    titles?: DogUpdatetitlesInput | Enumerable<string>
    mom?: DogUpdateOneWithoutMomChildrenInput
    momChildren?: DogUpdateManyWithoutMomInput
    dadChildren?: DogUpdateManyWithoutDadInput
    breeding?: BreedingUpdateOneRequiredWithoutDogsInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.BreedingScalarFieldEnum`
 */
export type BreedingScalarFieldEnum = Prisma.BreedingScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.DogScalarFieldEnum`
 */
export type DogScalarFieldEnum = Prisma.DogScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateBreeding`
 */
export type AggregateBreeding = Prisma.AggregateBreeding

/**
 * @deprecated Renamed to `Prisma.BreedingAvgAggregateOutputType`
 */
export type BreedingAvgAggregateOutputType = Prisma.BreedingAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.BreedingSumAggregateOutputType`
 */
export type BreedingSumAggregateOutputType = Prisma.BreedingSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.BreedingMinAggregateOutputType`
 */
export type BreedingMinAggregateOutputType = Prisma.BreedingMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.BreedingMaxAggregateOutputType`
 */
export type BreedingMaxAggregateOutputType = Prisma.BreedingMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.BreedingCountAggregateOutputType`
 */
export type BreedingCountAggregateOutputType = Prisma.BreedingCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateBreedingArgs`
 */
export type AggregateBreedingArgs = Prisma.AggregateBreedingArgs

/**
 * @deprecated Renamed to `Prisma.BreedingAvgAggregateInputType`
 */
export type BreedingAvgAggregateInputType = Prisma.BreedingAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.BreedingSumAggregateInputType`
 */
export type BreedingSumAggregateInputType = Prisma.BreedingSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.BreedingMinAggregateInputType`
 */
export type BreedingMinAggregateInputType = Prisma.BreedingMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.BreedingMaxAggregateInputType`
 */
export type BreedingMaxAggregateInputType = Prisma.BreedingMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.BreedingCountAggregateInputType`
 */
export type BreedingCountAggregateInputType = Prisma.BreedingCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.BreedingSelect`
 */
export type BreedingSelect = Prisma.BreedingSelect

/**
 * @deprecated Renamed to `Prisma.BreedingInclude`
 */
export type BreedingInclude = Prisma.BreedingInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueBreedingArgs`
 */
export type FindUniqueBreedingArgs = Prisma.FindUniqueBreedingArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstBreedingArgs`
 */
export type FindFirstBreedingArgs = Prisma.FindFirstBreedingArgs

/**
 * @deprecated Renamed to `Prisma.FindManyBreedingArgs`
 */
export type FindManyBreedingArgs = Prisma.FindManyBreedingArgs

/**
 * @deprecated Renamed to `Prisma.BreedingCreateArgs`
 */
export type BreedingCreateArgs = Prisma.BreedingCreateArgs

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateArgs`
 */
export type BreedingUpdateArgs = Prisma.BreedingUpdateArgs

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateManyArgs`
 */
export type BreedingUpdateManyArgs = Prisma.BreedingUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.BreedingUpsertArgs`
 */
export type BreedingUpsertArgs = Prisma.BreedingUpsertArgs

/**
 * @deprecated Renamed to `Prisma.BreedingDeleteArgs`
 */
export type BreedingDeleteArgs = Prisma.BreedingDeleteArgs

/**
 * @deprecated Renamed to `Prisma.BreedingDeleteManyArgs`
 */
export type BreedingDeleteManyArgs = Prisma.BreedingDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateDog`
 */
export type AggregateDog = Prisma.AggregateDog

/**
 * @deprecated Renamed to `Prisma.DogAvgAggregateOutputType`
 */
export type DogAvgAggregateOutputType = Prisma.DogAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DogSumAggregateOutputType`
 */
export type DogSumAggregateOutputType = Prisma.DogSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DogMinAggregateOutputType`
 */
export type DogMinAggregateOutputType = Prisma.DogMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DogMaxAggregateOutputType`
 */
export type DogMaxAggregateOutputType = Prisma.DogMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DogCountAggregateOutputType`
 */
export type DogCountAggregateOutputType = Prisma.DogCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateDogArgs`
 */
export type AggregateDogArgs = Prisma.AggregateDogArgs

/**
 * @deprecated Renamed to `Prisma.DogAvgAggregateInputType`
 */
export type DogAvgAggregateInputType = Prisma.DogAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DogSumAggregateInputType`
 */
export type DogSumAggregateInputType = Prisma.DogSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DogMinAggregateInputType`
 */
export type DogMinAggregateInputType = Prisma.DogMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DogMaxAggregateInputType`
 */
export type DogMaxAggregateInputType = Prisma.DogMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DogCountAggregateInputType`
 */
export type DogCountAggregateInputType = Prisma.DogCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DogSelect`
 */
export type DogSelect = Prisma.DogSelect

/**
 * @deprecated Renamed to `Prisma.DogInclude`
 */
export type DogInclude = Prisma.DogInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueDogArgs`
 */
export type FindUniqueDogArgs = Prisma.FindUniqueDogArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstDogArgs`
 */
export type FindFirstDogArgs = Prisma.FindFirstDogArgs

/**
 * @deprecated Renamed to `Prisma.FindManyDogArgs`
 */
export type FindManyDogArgs = Prisma.FindManyDogArgs

/**
 * @deprecated Renamed to `Prisma.DogCreateArgs`
 */
export type DogCreateArgs = Prisma.DogCreateArgs

/**
 * @deprecated Renamed to `Prisma.DogUpdateArgs`
 */
export type DogUpdateArgs = Prisma.DogUpdateArgs

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyArgs`
 */
export type DogUpdateManyArgs = Prisma.DogUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.DogUpsertArgs`
 */
export type DogUpsertArgs = Prisma.DogUpsertArgs

/**
 * @deprecated Renamed to `Prisma.DogDeleteArgs`
 */
export type DogDeleteArgs = Prisma.DogDeleteArgs

/**
 * @deprecated Renamed to `Prisma.DogDeleteManyArgs`
 */
export type DogDeleteManyArgs = Prisma.DogDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.BreedingWhereInput`
 */
export type BreedingWhereInput = Prisma.BreedingWhereInput

/**
 * @deprecated Renamed to `Prisma.BreedingOrderByInput`
 */
export type BreedingOrderByInput = Prisma.BreedingOrderByInput

/**
 * @deprecated Renamed to `Prisma.BreedingWhereUniqueInput`
 */
export type BreedingWhereUniqueInput = Prisma.BreedingWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.DogWhereInput`
 */
export type DogWhereInput = Prisma.DogWhereInput

/**
 * @deprecated Renamed to `Prisma.DogOrderByInput`
 */
export type DogOrderByInput = Prisma.DogOrderByInput

/**
 * @deprecated Renamed to `Prisma.DogWhereUniqueInput`
 */
export type DogWhereUniqueInput = Prisma.DogWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.BreedingCreateInput`
 */
export type BreedingCreateInput = Prisma.BreedingCreateInput

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateInput`
 */
export type BreedingUpdateInput = Prisma.BreedingUpdateInput

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateManyMutationInput`
 */
export type BreedingUpdateManyMutationInput = Prisma.BreedingUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.DogCreateInput`
 */
export type DogCreateInput = Prisma.DogCreateInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateInput`
 */
export type DogUpdateInput = Prisma.DogUpdateInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyMutationInput`
 */
export type DogUpdateManyMutationInput = Prisma.DogUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.DogListRelationFilter`
 */
export type DogListRelationFilter = Prisma.DogListRelationFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.IntNullableFilter`
 */
export type IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to `Prisma.DogRelationFilter`
 */
export type DogRelationFilter = Prisma.DogRelationFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableListFilter`
 */
export type StringNullableListFilter = Prisma.StringNullableListFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.BreedingRelationFilter`
 */
export type BreedingRelationFilter = Prisma.BreedingRelationFilter

/**
 * @deprecated Renamed to `Prisma.DogCreateManyWithoutBreedingInput`
 */
export type DogCreateManyWithoutBreedingInput = Prisma.DogCreateManyWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithoutBreedingInput`
 */
export type DogUpdateManyWithoutBreedingInput = Prisma.DogUpdateManyWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogCreatetitlesInput`
 */
export type DogCreatetitlesInput = Prisma.DogCreatetitlesInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOneWithoutMomChildrenInput`
 */
export type DogCreateOneWithoutMomChildrenInput = Prisma.DogCreateOneWithoutMomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOneWithoutDadChildrenInput`
 */
export type DogCreateOneWithoutDadChildrenInput = Prisma.DogCreateOneWithoutDadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateManyWithoutMomInput`
 */
export type DogCreateManyWithoutMomInput = Prisma.DogCreateManyWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogCreateManyWithoutDadInput`
 */
export type DogCreateManyWithoutDadInput = Prisma.DogCreateManyWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.BreedingCreateOneWithoutDogsInput`
 */
export type BreedingCreateOneWithoutDogsInput = Prisma.BreedingCreateOneWithoutDogsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DogUpdatetitlesInput`
 */
export type DogUpdatetitlesInput = Prisma.DogUpdatetitlesInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateOneWithoutMomChildrenInput`
 */
export type DogUpdateOneWithoutMomChildrenInput = Prisma.DogUpdateOneWithoutMomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateOneWithoutDadChildrenInput`
 */
export type DogUpdateOneWithoutDadChildrenInput = Prisma.DogUpdateOneWithoutDadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithoutMomInput`
 */
export type DogUpdateManyWithoutMomInput = Prisma.DogUpdateManyWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithoutDadInput`
 */
export type DogUpdateManyWithoutDadInput = Prisma.DogUpdateManyWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateOneRequiredWithoutDogsInput`
 */
export type BreedingUpdateOneRequiredWithoutDogsInput = Prisma.BreedingUpdateOneRequiredWithoutDogsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntNullableFilter`
 */
export type NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.DogCreateWithoutBreedingInput`
 */
export type DogCreateWithoutBreedingInput = Prisma.DogCreateWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOrConnectWithoutbreedingInput`
 */
export type DogCreateOrConnectWithoutbreedingInput = Prisma.DogCreateOrConnectWithoutbreedingInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithWhereUniqueWithoutBreedingInput`
 */
export type DogUpdateWithWhereUniqueWithoutBreedingInput = Prisma.DogUpdateWithWhereUniqueWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithWhereWithoutBreedingInput`
 */
export type DogUpdateManyWithWhereWithoutBreedingInput = Prisma.DogUpdateManyWithWhereWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogScalarWhereInput`
 */
export type DogScalarWhereInput = Prisma.DogScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.DogUpsertWithWhereUniqueWithoutBreedingInput`
 */
export type DogUpsertWithWhereUniqueWithoutBreedingInput = Prisma.DogUpsertWithWhereUniqueWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogCreateWithoutMomChildrenInput`
 */
export type DogCreateWithoutMomChildrenInput = Prisma.DogCreateWithoutMomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOrConnectWithoutmomChildrenInput`
 */
export type DogCreateOrConnectWithoutmomChildrenInput = Prisma.DogCreateOrConnectWithoutmomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateWithoutDadChildrenInput`
 */
export type DogCreateWithoutDadChildrenInput = Prisma.DogCreateWithoutDadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOrConnectWithoutdadChildrenInput`
 */
export type DogCreateOrConnectWithoutdadChildrenInput = Prisma.DogCreateOrConnectWithoutdadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogCreateWithoutMomInput`
 */
export type DogCreateWithoutMomInput = Prisma.DogCreateWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOrConnectWithoutmomInput`
 */
export type DogCreateOrConnectWithoutmomInput = Prisma.DogCreateOrConnectWithoutmomInput

/**
 * @deprecated Renamed to `Prisma.DogCreateWithoutDadInput`
 */
export type DogCreateWithoutDadInput = Prisma.DogCreateWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.DogCreateOrConnectWithoutdadInput`
 */
export type DogCreateOrConnectWithoutdadInput = Prisma.DogCreateOrConnectWithoutdadInput

/**
 * @deprecated Renamed to `Prisma.BreedingCreateWithoutDogsInput`
 */
export type BreedingCreateWithoutDogsInput = Prisma.BreedingCreateWithoutDogsInput

/**
 * @deprecated Renamed to `Prisma.BreedingCreateOrConnectWithoutdogsInput`
 */
export type BreedingCreateOrConnectWithoutdogsInput = Prisma.BreedingCreateOrConnectWithoutdogsInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithoutMomChildrenInput`
 */
export type DogUpdateWithoutMomChildrenInput = Prisma.DogUpdateWithoutMomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpsertWithoutMomChildrenInput`
 */
export type DogUpsertWithoutMomChildrenInput = Prisma.DogUpsertWithoutMomChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithoutDadChildrenInput`
 */
export type DogUpdateWithoutDadChildrenInput = Prisma.DogUpdateWithoutDadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpsertWithoutDadChildrenInput`
 */
export type DogUpsertWithoutDadChildrenInput = Prisma.DogUpsertWithoutDadChildrenInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithWhereUniqueWithoutMomInput`
 */
export type DogUpdateWithWhereUniqueWithoutMomInput = Prisma.DogUpdateWithWhereUniqueWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithWhereWithoutMomInput`
 */
export type DogUpdateManyWithWhereWithoutMomInput = Prisma.DogUpdateManyWithWhereWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogUpsertWithWhereUniqueWithoutMomInput`
 */
export type DogUpsertWithWhereUniqueWithoutMomInput = Prisma.DogUpsertWithWhereUniqueWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithWhereUniqueWithoutDadInput`
 */
export type DogUpdateWithWhereUniqueWithoutDadInput = Prisma.DogUpdateWithWhereUniqueWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateManyWithWhereWithoutDadInput`
 */
export type DogUpdateManyWithWhereWithoutDadInput = Prisma.DogUpdateManyWithWhereWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.DogUpsertWithWhereUniqueWithoutDadInput`
 */
export type DogUpsertWithWhereUniqueWithoutDadInput = Prisma.DogUpsertWithWhereUniqueWithoutDadInput

/**
 * @deprecated Renamed to `Prisma.BreedingUpdateWithoutDogsInput`
 */
export type BreedingUpdateWithoutDogsInput = Prisma.BreedingUpdateWithoutDogsInput

/**
 * @deprecated Renamed to `Prisma.BreedingUpsertWithoutDogsInput`
 */
export type BreedingUpsertWithoutDogsInput = Prisma.BreedingUpsertWithoutDogsInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithoutBreedingInput`
 */
export type DogUpdateWithoutBreedingInput = Prisma.DogUpdateWithoutBreedingInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithoutMomInput`
 */
export type DogUpdateWithoutMomInput = Prisma.DogUpdateWithoutMomInput

/**
 * @deprecated Renamed to `Prisma.DogUpdateWithoutDadInput`
 */
export type DogUpdateWithoutDadInput = Prisma.DogUpdateWithoutDadInput